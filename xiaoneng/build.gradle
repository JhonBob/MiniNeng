apply plugin: 'com.android.library'

apply plugin: 'com.github.dcendents.android-maven'
group='com.github.JhonBob'

dependencies {
    api fileTree(include: '*.jar', dir: 'libs')
    
    implementation 'de.greenrobot:eventbus:2.4.0'
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode 1
        versionName "1.0"

    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
//        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    android {
        lintOptions {
            abortOnError false
        }
    }


    //以下为配置library注释在打包jar后保留
// 打包源码jar
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }

// 打包文档jar
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    javadoc {
        options {
            //如果你的项目里面有中文注释的话，必须将格式设置为UTF-8，不然会出现乱码
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version true
        }
    }

}
String jarName = 'xiaonengchatui.jar'
String libPath = '../build/libs'
task makeJar(type: Jar, dependsOn: ['deleteOldJar', 'copyLibs', 'build']) {
    archiveName = jarName
    from('build/intermediates/classes/release')
    destinationDir = file(libPath)
    exclude('com/xiaoneng/**/*.class')
    include('cn/xiaoneng/**/*.class')
}

task deleteOldJar(type: Delete) {
    delete libPath + jarName
}

task copyLibs(type: Copy) {
    from('libs/')
    into(libPath)
    include('*.*','/*/*.*')
}